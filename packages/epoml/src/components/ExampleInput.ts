import { createElement } from '../core/createElement';\nimport { Component, BaseComponentProps } from '../types';\n\nexport interface ExampleInputProps extends BaseComponentProps {\n  /** Title for the example input */\n  title?: string;\n  /** Description of the example input */\n  description?: string;\n  /** The actual input content */\n  content: string;\n  /** Format of the input */\n  format?: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml';\n  /** Language for syntax highlighting */\n  language?: string;\n  /** Whether this is a valid input */\n  valid?: boolean;\n}\n\nexport function ExampleInput(props: ExampleInputProps): Component {\n  const {\n    title,\n    description,\n    content,\n    format = 'text',\n    language,\n    valid = true,\n    syntax = 'text',\n    className,\n    speaker,\n    children = []\n  } = props;\n\n  // Generate the component based on syntax\n  switch (syntax) {\n    case 'markdown':\n      return generateMarkdownExampleInput(title, description, content, format, language, valid, children, className, speaker);\n    \n    case 'html':\n      return generateHtmlExampleInput(title, description, content, format, language, valid, children, className, speaker);\n    \n    case 'json':\n      return generateJsonExampleInput(title, description, content, format, language, valid, children, className, speaker);\n    \n    case 'yaml':\n      return generateYamlExampleInput(title, description, content, format, language, valid, children, className, speaker);\n    \n    case 'xml':\n      return generateXmlExampleInput(title, description, content, format, language, valid, children, className, speaker);\n    \n    case 'text':\n    default:\n      return generateTextExampleInput(title, description, content, format, language, valid, children, className, speaker);\n  }\n}\n\nfunction generateMarkdownExampleInput(\n  title: string | undefined,\n  description: string | undefined,\n  content: string,\n  format: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml',\n  language: string | undefined,\n  valid: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  let result = '';\n  \n  const validMarker = valid ? ' ‚úÖ (Valid)' : ' ‚ùå (Invalid)';\n  result += `## üì• Example Input${title ? `: ${title}` : ''}${validMarker}\\n\\n`;\n  \n  if (description) {\n    result += `**Description:** ${description}\\n\\n`;\n  }\n  \n  result += `**Format:** ${format}\\n\\n`;\n  \n  if (language) {\n    result += `**Language:** ${language}\\n\\n`;\n  }\n  \n  result += '### Content\\n\\n';\n  result += `\\`\\`\\`${language || format}\\n${content}\\n\\`\\`\\`\\n\\n`;\n  \n  // Add children content\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    result += childrenContent;\n  }\n  \n  return createElement('div', { className, 'data-speaker': speaker }, result);\n}\n\nfunction generateHtmlExampleInput(\n  title: string | undefined,\n  description: string | undefined,\n  content: string,\n  format: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml',\n  language: string | undefined,\n  valid: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  const validMarker = valid ? ' ‚úÖ (Valid)' : ' ‚ùå (Invalid)';\n  \n  let html = `<div class=\"example-input${className ? ` ${className}` : ''}\"${speaker ? ` data-speaker=\"${speaker}\"` : ''}>\\n`;\n  html += `  <h2>üì• Example Input${title ? `: ${escapeHtml(title)}` : ''}${validMarker}</h2>\\n`;\n  \n  if (description) {\n    html += `  <p class=\"example-input-description\"><strong>Description:</strong> ${escapeHtml(description)}</p>\\n`;\n  }\n  \n  html += `  <p class=\"example-input-format\"><strong>Format:</strong> ${format}</p>\\n`;\n  \n  if (language) {\n    html += `  <p class=\"example-input-language\"><strong>Language:</strong> ${escapeHtml(language)}</p>\\n`;\n  }\n  \n  html += '  <h3>Content</h3>\\n';\n  html += `  <pre class=\"example-input-content\"><code class=\"language-${language || format}\">${escapeHtml(content)}</code></pre>\\n`;\n  \n  // Add children content\n  if (children.length > 0) {\n    html += '  <div class=\"example-input-details\">\\n';\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    html += `    ${childrenContent}\\n`;\n    html += '  </div>\\n';\n  }\n  \n  html += '</div>';\n  \n  return createElement('div', { 'data-speaker': speaker }, html);\n}\n\nfunction generateJsonExampleInput(\n  title: string | undefined,\n  description: string | undefined,\n  content: string,\n  format: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml',\n  language: string | undefined,\n  valid: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  const exampleInput: any = {\n    content,\n    format,\n    valid\n  };\n  \n  if (title) {\n    exampleInput.title = title;\n  }\n  \n  if (description) {\n    exampleInput.description = description;\n  }\n  \n  if (language) {\n    exampleInput.language = language;\n  }\n  \n  // Add children content as a string\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    exampleInput.details = childrenContent;\n  }\n  \n  if (className) {\n    exampleInput.className = className;\n  }\n  \n  if (speaker) {\n    exampleInput.speaker = speaker;\n  }\n  \n  return createElement('pre', { className, 'data-speaker': speaker }, JSON.stringify(exampleInput, null, 2));\n}\n\nfunction generateYamlExampleInput(\n  title: string | undefined,\n  description: string | undefined,\n  content: string,\n  format: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml',\n  language: string | undefined,\n  valid: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  const validMarker = valid ? ' ‚úÖ (Valid)' : ' ‚ùå (Invalid)';\n  let yaml = `content: |\\n${content.split('\\n').map(line => `  ${line}`).join('\\n')}\\nformat: ${format}\\nvalid: ${valid}\\n`;\n  \n  if (title) {\n    yaml += `title: ${JSON.stringify(title)}\\n`;\n  }\n  \n  if (description) {\n    yaml += `description: ${JSON.stringify(description)}\\n`;\n  }\n  \n  if (language) {\n    yaml += `language: ${JSON.stringify(language)}\\n`;\n  }\n  \n  // Add children content as a string\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    yaml += `details: |\\n${childrenContent.split('\\n').map(line => `  ${line}`).join('\\n')}`;\n  }\n  \n  if (className) {\n    yaml += `\\nclassName: ${JSON.stringify(className)}`;\n  }\n  \n  if (speaker) {\n    yaml += `\\nspeaker: ${JSON.stringify(speaker)}`;\n  }\n  \n  return createElement('pre', { className, 'data-speaker': speaker }, yaml);\n}\n\nfunction generateXmlExampleInput(\n  title: string | undefined,\n  description: string | undefined,\n  content: string,\n  format: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml',\n  language: string | undefined,\n  valid: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  let xml = `<exampleInput content=\"${escapeXmlAttr(content)}\" format=\"${format}\" valid=\"${valid}\"`;\n  \n  if (title) {\n    xml += ` title=\"${escapeXmlAttr(title)}\"`;\n  }\n  \n  if (language) {\n    xml += ` language=\"${escapeXmlAttr(language)}\"`;\n  }\n  \n  if (className) {\n    xml += ` class=\"${className}\"`;\n  }\n  \n  if (speaker) {\n    xml += ` data-speaker=\"${speaker}\"`;\n  }\n  \n  xml += '>\\n';\n  \n  if (description) {\n    xml += `  <description>${escapeXml(description)}</description>\\n`;\n  }\n  \n  // Add children content\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    xml += `  <details>${escapeXml(childrenContent)}</details>\\n`;\n  }\n  \n  xml += '</exampleInput>';\n  \n  return createElement('pre', { className, 'data-speaker': speaker }, xml);\n}\n\nfunction generateTextExampleInput(\n  title: string | undefined,\n  description: string | undefined,\n  content: string,\n  format: 'json' | 'xml' | 'text' | 'html' | 'markdown' | 'csv' | 'yaml',\n  language: string | undefined,\n  valid: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  const validMarker = valid ? ' ‚úÖ (Valid)' : ' ‚ùå (Invalid)';\n  let result = `EXAMPLE INPUT: üì•${title ? ` ${title}` : ''}${validMarker}\\n`;\n  result += '='.repeat(Math.max(14, (title?.length || 0) + 14)) + '\\n\\n';\n  \n  if (description) {\n    result += `Description: ${description}\\n\\n`;\n  }\n  \n  result += `Format: ${format}\\n\\n`;\n  \n  if (language) {\n    result += `Language: ${language}\\n\\n`;\n  }\n  \n  result += 'Content:\\n';\n  result += '-------\\n';\n  result += `${content}\\n\\n`;\n  \n  // Add children content\n  if (children.length > 0) {\n    result += 'Details:\\n';\n    result += '-------\\n';\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    result += childrenContent;\n  }\n  \n  return createElement('div', { className, 'data-speaker': speaker }, result);\n}\n\nfunction escapeHtml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction escapeXml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction escapeXmlAttr(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;');\n}