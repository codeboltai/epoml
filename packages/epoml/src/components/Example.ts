import { createElement } from '../core/createElement';\nimport { Component, BaseComponentProps } from '../types';\n\nexport interface ExampleProps extends BaseComponentProps {\n  /** Title for the example */\n  title?: string;\n  /** Description of the example */\n  description?: string;\n  /** Category or topic of the example */\n  category?: string;\n  /** Difficulty level */\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  /** Whether this is a best practice example */\n  bestPractice?: boolean;\n}\n\nexport function Example(props: ExampleProps): Component {\n  const {\n    title,\n    description,\n    category,\n    difficulty = 'beginner',\n    bestPractice = false,\n    syntax = 'text',\n    className,\n    speaker,\n    children = []\n  } = props;\n\n  // Generate the component based on syntax\n  switch (syntax) {\n    case 'markdown':\n      return generateMarkdownExample(title, description, category, difficulty, bestPractice, children, className, speaker);\n    \n    case 'html':\n      return generateHtmlExample(title, description, category, difficulty, bestPractice, children, className, speaker);\n    \n    case 'json':\n      return generateJsonExample(title, description, category, difficulty, bestPractice, children, className, speaker);\n    \n    case 'yaml':\n      return generateYamlExample(title, description, category, difficulty, bestPractice, children, className, speaker);\n    \n    case 'xml':\n      return generateXmlExample(title, description, category, difficulty, bestPractice, children, className, speaker);\n    \n    case 'text':\n    default:\n      return generateTextExample(title, description, category, difficulty, bestPractice, children, className, speaker);\n  }\n}\n\nfunction generateMarkdownExample(\n  title: string | undefined,\n  description: string | undefined,\n  category: string | undefined,\n  difficulty: 'beginner' | 'intermediate' | 'advanced',\n  bestPractice: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  // Difficulty emoji\n  const difficultyEmoji = {\n    'beginner': 'üü¢',\n    'intermediate': 'üü°',\n    'advanced': 'üî¥'\n  }[difficulty];\n  \n  // Best practice marker\n  const bestPracticeMarker = bestPractice ? ' ‚≠ê' : '';\n  \n  let result = '';\n  result += `## üìù Example${title ? `: ${title}` : ''}${bestPracticeMarker} ${difficultyEmoji}\\n\\n`;\n  \n  if (description) {\n    result += `**Description:** ${description}\\n\\n`;\n  }\n  \n  if (category) {\n    result += `**Category:** ${category}\\n\\n`;\n  }\n  \n  result += `**Difficulty:** ${difficulty}\\n\\n`;\n  \n  // Add children content (the example content)\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    result += childrenContent;\n  }\n  \n  return createElement('div', { className, 'data-speaker': speaker }, result);\n}\n\nfunction generateHtmlExample(\n  title: string | undefined,\n  description: string | undefined,\n  category: string | undefined,\n  difficulty: 'beginner' | 'intermediate' | 'advanced',\n  bestPractice: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  // Difficulty emoji\n  const difficultyEmoji = {\n    'beginner': 'üü¢',\n    'intermediate': 'üü°',\n    'advanced': 'üî¥'\n  }[difficulty];\n  \n  // Best practice marker\n  const bestPracticeMarker = bestPractice ? ' ‚≠ê' : '';\n  \n  let html = `<div class=\"example${className ? ` ${className}` : ''}\"${speaker ? ` data-speaker=\"${speaker}\"` : ''}>\\n`;\n  html += `  <h2>üìù Example${title ? `: ${escapeHtml(title)}` : ''}${bestPracticeMarker} ${difficultyEmoji}</h2>\\n`;\n  \n  if (description) {\n    html += `  <p class=\"example-description\"><strong>Description:</strong> ${escapeHtml(description)}</p>\\n`;\n  }\n  \n  if (category) {\n    html += `  <p class=\"example-category\"><strong>Category:</strong> ${escapeHtml(category)}</p>\\n`;\n  }\n  \n  html += `  <p class=\"example-difficulty\"><strong>Difficulty:</strong> ${difficulty}</p>\\n`;\n  \n  // Add children content (the example content)\n  if (children.length > 0) {\n    html += '  <div class=\"example-content\">\\n';\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    html += `    ${childrenContent}\\n`;\n    html += '  </div>\\n';\n  }\n  \n  html += '</div>';\n  \n  return createElement('div', { 'data-speaker': speaker }, html);\n}\n\nfunction generateJsonExample(\n  title: string | undefined,\n  description: string | undefined,\n  category: string | undefined,\n  difficulty: 'beginner' | 'intermediate' | 'advanced',\n  bestPractice: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  const example: any = {\n    difficulty,\n    bestPractice\n  };\n  \n  if (title) {\n    example.title = title;\n  }\n  \n  if (description) {\n    example.description = description;\n  }\n  \n  if (category) {\n    example.category = category;\n  }\n  \n  // Add children content as a string\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    example.content = childrenContent;\n  }\n  \n  if (className) {\n    example.className = className;\n  }\n  \n  if (speaker) {\n    example.speaker = speaker;\n  }\n  \n  return createElement('pre', { className, 'data-speaker': speaker }, JSON.stringify(example, null, 2));\n}\n\nfunction generateYamlExample(\n  title: string | undefined,\n  description: string | undefined,\n  category: string | undefined,\n  difficulty: 'beginner' | 'intermediate' | 'advanced',\n  bestPractice: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  // Difficulty emoji\n  const difficultyEmoji = {\n    'beginner': 'üü¢',\n    'intermediate': 'üü°',\n    'advanced': 'üî¥'\n  }[difficulty];\n  \n  // Best practice marker\n  const bestPracticeMarker = bestPractice ? ' ‚≠ê' : '';\n  \n  let yaml = `difficulty: ${difficulty}\\nbestPractice: ${bestPractice}\\n`;\n  \n  if (title) {\n    yaml += `title: ${JSON.stringify(title)}\\n`;\n  }\n  \n  if (description) {\n    yaml += `description: ${JSON.stringify(description)}\\n`;\n  }\n  \n  if (category) {\n    yaml += `category: ${JSON.stringify(category)}\\n`;\n  }\n  \n  // Add children content as a string\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    yaml += `content: |\\n${childrenContent.split('\\n').map(line => `  ${line}`).join('\\n')}`;\n  }\n  \n  if (className) {\n    yaml += `\\nclassName: ${JSON.stringify(className)}`;\n  }\n  \n  if (speaker) {\n    yaml += `\\nspeaker: ${JSON.stringify(speaker)}`;\n  }\n  \n  return createElement('pre', { className, 'data-speaker': speaker }, yaml);\n}\n\nfunction generateXmlExample(\n  title: string | undefined,\n  description: string | undefined,\n  category: string | undefined,\n  difficulty: 'beginner' | 'intermediate' | 'advanced',\n  bestPractice: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  let xml = `<example difficulty=\"${difficulty}\" bestPractice=\"${bestPractice}\"`;\n  \n  if (title) {\n    xml += ` title=\"${escapeXmlAttr(title)}\"`;\n  }\n  \n  if (category) {\n    xml += ` category=\"${escapeXmlAttr(category)}\"`;\n  }\n  \n  if (className) {\n    xml += ` class=\"${className}\"`;\n  }\n  \n  if (speaker) {\n    xml += ` data-speaker=\"${speaker}\"`;\n  }\n  \n  xml += '>\\n';\n  \n  if (description) {\n    xml += `  <description>${escapeXml(description)}</description>\\n`;\n  }\n  \n  // Add children content (the example content)\n  if (children.length > 0) {\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    xml += `  <content>${escapeXml(childrenContent)}</content>\\n`;\n  }\n  \n  xml += '</example>';\n  \n  return createElement('pre', { className, 'data-speaker': speaker }, xml);\n}\n\nfunction generateTextExample(\n  title: string | undefined,\n  description: string | undefined,\n  category: string | undefined,\n  difficulty: 'beginner' | 'intermediate' | 'advanced',\n  bestPractice: boolean,\n  children: (Component | string)[],\n  className?: string,\n  speaker?: string\n): Component {\n  // Difficulty emoji\n  const difficultyEmoji = {\n    'beginner': 'üü¢',\n    'intermediate': 'üü°',\n    'advanced': 'üî¥'\n  }[difficulty];\n  \n  // Best practice marker\n  const bestPracticeMarker = bestPractice ? ' ‚≠ê' : '';\n  \n  let result = `EXAMPLE: üìù${title ? ` ${title}` : ''}${bestPracticeMarker} ${difficultyEmoji}\\n`;\n  result += '='.repeat(Math.max(8, (title?.length || 0) + 8)) + '\\n\\n';\n  \n  if (description) {\n    result += `Description: ${description}\\n\\n`;\n  }\n  \n  if (category) {\n    result += `Category: ${category}\\n\\n`;\n  }\n  \n  result += `Difficulty: ${difficulty}\\n\\n`;\n  \n  // Add children content (the example content)\n  if (children.length > 0) {\n    result += 'Content:\\n';\n    result += '-------\\n\\n';\n    const childrenContent = children.map(child => typeof child === 'string' ? child : '').join('');\n    result += childrenContent;\n  }\n  \n  return createElement('div', { className, 'data-speaker': speaker }, result);\n}\n\nfunction escapeHtml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction escapeXml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction escapeXmlAttr(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;');\n}